using System;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using Extensibility;
using EnvDTE;
using EnvDTE80;
using Microsoft.VisualStudio.CommandBars;
using System.Resources;
using System.Reflection;
using System.Globalization;
using System.Diagnostics;
using Microsoft.VisualStudio.VCProjectEngine;
using System.Text.RegularExpressions;

namespace UnityBuild
{
    internal class Unity
    {
        public string Name;
        public string FileName;
        public Dictionary<string, Cpp> Cpps = new Dictionary<string, Cpp>();

        public Unity(string name)
        {
            this.Name = name;
        }

        public void Load(VCFile file)
        {
            this.FileName = file.FullPath;
            this.Cpps = new Dictionary<string, Cpp>();

            string[] lines = File.ReadAllLines(file.FullPath);

            for (int i = 0; i < lines.Length; i++)
            {
                Match match = Utils.IncludeRegex.Match(lines[i]);
                if (match.Success && match.Groups["Include"].Captures.Count > 0)
                {
                    string include = match.Groups["Include"].Captures[0].Value;
                    if (include.EndsWith(".cpp", true, null))
                    {
                        Cpp cpp;

                        VCFile f = Connect.GetVCFile(file.project as VCProject, include);
                        if (f != null)
                        {
                            cpp = new Cpp(f);
                        }
                        else
                        {
                            cpp = new Cpp(include);
                        }

                        if (i > 0 && lines[i - 1].StartsWith("#if"))
                        {
                            cpp.Condition = lines[i - 1].Substring(4);
                        }

                        cpp.Unity = this;
                        this.Cpps.Add(cpp.Name, cpp);
                    }
                }
            }
        }

        public void Save(string projectDirectory, string folder, string pch)
        {
            string path = Path.Combine(projectDirectory, folder);
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }

            this.FileName = Path.Combine(path, this.Name + ".cpp");

            int line = 1;

            using (StringWriter writer = new StringWriter())
            {
                writer.WriteLine("////////////////////////////////////////////////////////////////////////////////");
                writer.WriteLine("//                                                                            //");
                writer.WriteLine("// Unity File                                                                 //");
                writer.WriteLine("//                                                                            //");
                writer.WriteLine("// Generated by Unity Build.                                                  //");
                writer.WriteLine("//                                                                            //");
                writer.WriteLine("////////////////////////////////////////////////////////////////////////////////");
                writer.WriteLine();
                line += 8;

                if (!String.IsNullOrEmpty(pch))
                {
                    writer.WriteLine("#include \"{0}\"", pch);
                    writer.WriteLine();
                    line += 2;
                }

                int i = 1;

                foreach (Cpp cpp in this.Cpps.Values)
                {
                    writer.WriteLine("#pragma message(\"{0}/{1}.cpp({2}) : [{3} / {4}] {5}\")", folder, this.Name, line, i, this.Cpps.Values.Count, Utils.NormalizePath(cpp.Name));
                    line += 1;

                    if (!String.IsNullOrEmpty(cpp.Condition))
                    {
                        writer.WriteLine("#if {0}", cpp.Condition);
                        line += 1;
                    }

                    writer.WriteLine("#include \"{0}\"", cpp.Name);
                    line += 1;

                    if (!String.IsNullOrEmpty(cpp.Condition))
                    {
                        writer.WriteLine("#endif");
                        line += 1;
                    }

                    writer.WriteLine();
                    line += 1;

                    i++;
                }

                string text = writer.ToString();
                if (!Utils.CompareText(this.FileName, text))
                {
                    Utils.WriteAllText(this.FileName, text);
                }
            }
        }
    }
}
